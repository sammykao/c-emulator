// urt0.ums
// Jordan Pittignano (jpitti01) and Sammy Kao (skao01)
// 4/30/24
// asmcoding
// Purpose:
    // Contains startup code to allocate space for the call stack and
    // the initializion of both the stack pointer and jumptables
// Calling Conventions:
    // We stuck to the standard calling conventions 
    // r0 is 0
    // r1 is return address and register result
    // r2 is stack pointer
    // r3 and r4 are nonvolatiles
    // r5 is volatile
    // r6 and r7 are temporaries and volatile



// Initializes temporary registers and register 0 and starts the program
.section init
    .temps r6, r7
    .zero r0

    // Setting r0 to 0 and making r2 the pointer to the end of the stack,
    // then returning back to the main function
    start:
        r0:= 0
        r2:= endstack    // Setting r2 to the end of the stack

        goto callmain    // Return to the main function



// Allocating 40k bytes of space on one stack that acts as both call and
// value stack
.section data
    // Allocating the 40k bytes
    .space 10000
    endstack:
    
    // Creates variable for whether we are in the waiting or entering state
    // Waiting = 0, Entering = 1
    state:
        .space 1

    // Creates variable for how many numbers are on our stack
    stack_length:
        .space 1



// Initializes the jumptable
.section rodata
    // Allocates 256 4-byte values for 256 ascii inputs
    jumptable:
        .space 256